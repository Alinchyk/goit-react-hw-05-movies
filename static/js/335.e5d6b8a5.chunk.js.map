{"version":3,"file":"static/js/335.e5d6b8a5.chunk.js","mappings":"mTACMA,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAiB,mCAAG,+GAEND,EAAAA,EAAAA,IAAA,sCAAyCD,IAFnC,uBAErBG,EAFqB,EAErBA,KAFqB,kBAGtBA,EAAKC,SAHiB,sCAKvB,IAAIC,MAAM,yCALa,yDAAH,qDASjBC,EAAY,mCAAG,WAAMC,GAAN,gGAELN,EAAAA,EAAAA,IAAA,iBACFM,EADE,oBACiBP,IACjCQ,MAAK,SAAAC,GAAG,MAAK,CACZC,MAAOD,EAAIN,KAAKO,MAChBC,YAAaF,EAAIN,KAAKQ,YACtBC,aAAcH,EAAIN,KAAKS,aACvBC,SAAUJ,EAAIN,KAAKU,SACnBC,OAAQL,EAAIN,KAAKW,OALV,IAJa,cAElBX,EAFkB,yBAWjBA,GAXiB,sCAalB,IAAIE,MAAM,sCAbQ,yDAAH,sDAiBZU,EAAW,mCAAG,WAAMR,GAAN,kGAEAN,EAAAA,EAAAA,IAAA,iBACXM,EADW,4BACgBP,EADhB,oBAFA,uBAEfG,EAFe,EAEfA,KAFe,kBAKhBA,EAAKa,MALW,sCAOjB,IAAIX,MAAM,8BAPO,yDAAH,sDAWXY,EAAc,mCAAG,WAAMV,GAAN,gGAEHN,EAAAA,EAAAA,IAAA,iBACXM,EADW,4BACgBP,EADhB,YAFG,cAEpBkB,EAFoB,yBAKnBA,EAASf,KAAKC,SALK,sCAOpB,IAAIC,MAAM,iCAPU,yDAAH,sDAWdc,EAAe,mCAAG,WAAMC,GAAN,kGAEJnB,EAAAA,EAAAA,IAAA,gCACID,EADJ,kBACqBoB,EADrB,+CAFI,uBAEnBjB,EAFmB,EAEnBA,KAFmB,kBAKpBA,GALoB,gCAO3BkB,QAAQC,MAAM,gCAAd,MAP2B,yDAAH,qD,wKClDfC,EAAUC,EAAAA,GAAAA,QAAH,6CAIPC,EAAcD,EAAAA,GAAAA,GAAH,2CAIXE,EAASF,EAAAA,GAAAA,GAAH,gDAING,EAAcH,EAAAA,GAAAA,GAAH,gD,SCZT,SAASI,EAAT,GAA+B,IAAZC,EAAW,EAAXA,QAChC,GAAKA,EAIL,OACE,SAACN,EAAD,UACGM,EAAQC,OAAS,GAChB,SAACL,EAAD,UACGI,EAAQE,KAAI,SAACC,EAAQC,GAAT,OACX,UAACP,EAAD,YACE,UAACC,EAAD,sBAAsBK,EAAOE,WAC7B,uBAAIF,EAAOG,YAFAF,EADF,OAQf,sDAIP,CClBc,SAASG,IACtB,IAAQ7B,GAAY8B,EAAAA,EAAAA,MAAZ9B,QACR,GAA8B+B,EAAAA,EAAAA,UAAS,MAAvC,eAAOT,EAAP,KAAgBU,EAAhB,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,8GAEQxB,EAAAA,EAAAA,IAAeV,GAFvB,OAERsB,EAFQ,OAGdU,EAAWV,GAHG,gDAKdR,QAAQC,MAAM,gCAAd,MALc,yDAAH,qDASfmB,GACD,GAAE,CAAClC,KAEG,SAACqB,EAAD,CAASC,QAASA,GAC1B,C","sources":["components/services/moviesApi.js","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.js","views/ReviewsView.js"],"sourcesContent":["import axios from 'axios';\nconst API_KEY = '79f7e9d5eb5b406ae3795a32db0606aa';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const getTrendingMovies = async () => {\n  try {\n    const { data } = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n    return data.results;\n  } catch (error) {\n    throw new Error('Oops... seems like an error occurred.');\n  }\n};\n\nexport const getMovieById = async movieId => {\n  try {\n    const data = await axios\n      .get(`/movie/${movieId}?api_key=${API_KEY}`)\n      .then(res => ({\n        title: res.data.title,\n        poster_path: res.data.poster_path,\n        vote_average: res.data.vote_average,\n        overview: res.data.overview,\n        genres: res.data.genres,\n      }));\n    return data;\n  } catch (error) {\n    throw new Error('Error while fetching movie details');\n  }\n};\n\nexport const getCastInfo = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return data.cast;\n  } catch (error) {\n    throw new Error('Failed to fetch movie cast');\n  }\n};\n\nexport const getReviewsInfo = async movieId => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}/reviews?api_key=${API_KEY}&page=1`\n    );\n    return response.data.results;\n  } catch (error) {\n    throw new Error('Failed to fetch movie reviews');\n  }\n};\n\nexport const getMoviesByName = async query => {\n  try {\n    const { data } = await axios.get(\n      `/search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n    );\n    return data;\n  } catch (error) {\n    console.error('Error while searching movies:', error);\n  }\n};\n","import styled from 'styled-components';\n\nexport const Section = styled.section`\n  padding: 15px 10;\n`;\n\nexport const ReviewsList = styled.ul`\n  display: block;\n`;\n\nexport const Review = styled.li`\n  margin-bottom: 10px;\n`;\n\nexport const ReviewTitle = styled.h2`\n  margin-bottom: 10px;\n`;\n","import { Section, ReviewsList, Review, ReviewTitle } from './Reviews.styled';\n\nexport default function Reviews({ reviews }) {\n  if (!reviews) {\n    return;\n  }\n\n  return (\n    <Section>\n      {reviews.length > 0 ? (\n        <ReviewsList>\n          {reviews.map((review, index) => (\n            <Review key={index}>\n              <ReviewTitle>Author: {review.author}</ReviewTitle>\n              <p>{review.content}</p>\n            </Review>\n          ))}\n        </ReviewsList>\n      ) : (\n        <p>There are no reviews yet.</p>\n      )}\n    </Section>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviewsInfo } from 'components/services/moviesApi';\nimport Reviews from 'components/Reviews/Reviews';\n\nexport default function ReviewsView() {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const reviews = await getReviewsInfo(movieId);\n        setReviews(reviews);\n      } catch (error) {\n        console.error('Error while fetching reviews:', error);\n      }\n    };\n\n    fetchData();\n  }, [movieId]);\n\n  return <Reviews reviews={reviews} />;\n}\n"],"names":["API_KEY","axios","getTrendingMovies","data","results","Error","getMovieById","movieId","then","res","title","poster_path","vote_average","overview","genres","getCastInfo","cast","getReviewsInfo","response","getMoviesByName","query","console","error","Section","styled","ReviewsList","Review","ReviewTitle","Reviews","reviews","length","map","review","index","author","content","ReviewsView","useParams","useState","setReviews","useEffect","fetchData"],"sourceRoot":""}