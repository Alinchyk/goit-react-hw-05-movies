{"version":3,"file":"static/js/871.59590a8a.chunk.js","mappings":"mTACMA,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAiB,mCAAG,+GAEND,EAAAA,EAAAA,IAAA,sCAAyCD,IAFnC,uBAErBG,EAFqB,EAErBA,KAFqB,kBAGtBA,EAAKC,SAHiB,sCAKvB,IAAIC,MAAM,yCALa,yDAAH,qDASjBC,EAAY,mCAAG,WAAMC,GAAN,gGAELN,EAAAA,EAAAA,IAAA,iBACFM,EADE,oBACiBP,IACjCQ,MAAK,SAAAC,GAAG,MAAK,CACZC,MAAOD,EAAIN,KAAKO,MAChBC,YAAaF,EAAIN,KAAKQ,YACtBC,aAAcH,EAAIN,KAAKS,aACvBC,SAAUJ,EAAIN,KAAKU,SACnBC,OAAQL,EAAIN,KAAKW,OALV,IAJa,cAElBX,EAFkB,yBAWjBA,GAXiB,sCAalB,IAAIE,MAAM,sCAbQ,yDAAH,sDAiBZU,EAAW,mCAAG,WAAMR,GAAN,kGAEAN,EAAAA,EAAAA,IAAA,iBACXM,EADW,4BACgBP,EADhB,oBAFA,uBAEfG,EAFe,EAEfA,KAFe,kBAKhBA,EAAKa,MALW,sCAOjB,IAAIX,MAAM,8BAPO,yDAAH,sDAWXY,EAAc,mCAAG,WAAMV,GAAN,gGAEHN,EAAAA,EAAAA,IAAA,iBACXM,EADW,4BACgBP,EADhB,YAFG,cAEpBkB,EAFoB,yBAKnBA,EAASf,KAAKC,SALK,sCAOpB,IAAIC,MAAM,iCAPU,yDAAH,sDAWdc,EAAe,mCAAG,WAAMC,GAAN,kGAEJnB,EAAAA,EAAAA,IAAA,gCACID,EADJ,kBACqBoB,EADrB,+CAFI,uBAEnBjB,EAFmB,EAEnBA,KAFmB,kBAKpBA,GALoB,gCAO3BkB,QAAQC,MAAM,gCAAd,MAP2B,yDAAH,qD,sKClDfC,EAAWC,EAAAA,GAAAA,GAAH,2GAORC,EAAUD,EAAAA,GAAAA,QAAH,6CAIPE,EAAOF,EAAAA,GAAAA,GAAH,+F,qECRF,SAASG,EAAT,GAAyB,IAATX,EAAQ,EAARA,KAC7B,GAAKA,EAIL,OACE,SAACS,EAAD,UACGT,EAAKY,OAAS,GACb,SAACF,EAAD,UACGV,EAAKa,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UAC7BC,EAAWH,EAZb,kCAYsCA,EAAeI,EACzD,OACE,UAACZ,EAAD,YACE,gBAAKa,IAAKF,EAAUG,IAAKL,EAAMM,MAAO,IAAKC,OAAQ,OACnD,4BACE,wBACE,0BAAOP,MAERC,GACC,0BACE,uCACA,gCAAQA,SAGV,0BACE,uCACA,+CAdOH,EAoBlB,OAGH,qFAIP,CCvCc,SAASU,IACtB,IAAQjC,GAAYkC,EAAAA,EAAAA,MAAZlC,QACR,GAAwBmC,EAAAA,EAAAA,UAAS,MAAjC,eAAO1B,EAAP,KAAa2B,EAAb,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,8GAEK9B,EAAAA,EAAAA,IAAYR,GAFjB,OAERS,EAFQ,OAGd2B,EAAQ3B,GAHM,gDAKdK,QAAQC,MAAM,6BAAd,MALc,yDAAH,qDASfuB,GACD,GAAE,CAACtC,KAEG,SAACoB,EAAD,CAAMX,KAAMA,GACpB,C","sources":["components/services/moviesApi.js","components/Cast/Cast.styled.js","components/Cast/Cast.js","views/CastView.js"],"sourcesContent":["import axios from 'axios';\nconst API_KEY = '79f7e9d5eb5b406ae3795a32db0606aa';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const getTrendingMovies = async () => {\n  try {\n    const { data } = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n    return data.results;\n  } catch (error) {\n    throw new Error('Oops... seems like an error occurred.');\n  }\n};\n\nexport const getMovieById = async movieId => {\n  try {\n    const data = await axios\n      .get(`/movie/${movieId}?api_key=${API_KEY}`)\n      .then(res => ({\n        title: res.data.title,\n        poster_path: res.data.poster_path,\n        vote_average: res.data.vote_average,\n        overview: res.data.overview,\n        genres: res.data.genres,\n      }));\n    return data;\n  } catch (error) {\n    throw new Error('Error while fetching movie details');\n  }\n};\n\nexport const getCastInfo = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return data.cast;\n  } catch (error) {\n    throw new Error('Failed to fetch movie cast');\n  }\n};\n\nexport const getReviewsInfo = async movieId => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}/reviews?api_key=${API_KEY}&page=1`\n    );\n    return response.data.results;\n  } catch (error) {\n    throw new Error('Failed to fetch movie reviews');\n  }\n};\n\nexport const getMoviesByName = async query => {\n  try {\n    const { data } = await axios.get(\n      `/search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n    );\n    return data;\n  } catch (error) {\n    console.error('Error while searching movies:', error);\n  }\n};\n","import styled from 'styled-components';\n\nexport const ListItem = styled.li`\n  display: flex;\n  gap: 10px;\n  align-items: center;\n  justify-content: start;\n`;\n\nexport const Section = styled.section`\n  padding: 15px 10;\n`;\n\nexport const List = styled.ul`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  gap: 15px;\n`;\n","import { ListItem, List, Section } from './Cast.styled';\nimport blankImage from './blank_profile.png';\n\nconst IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport default function Cast({ cast }) {\n  if (!cast) {\n    return;\n  }\n\n  return (\n    <Section>\n      {cast.length > 0 ? (\n        <List>\n          {cast.map(({ id, profile_path, name, character }) => {\n            const imageSRC = profile_path ? IMG_URL + profile_path : blankImage;\n            return (\n              <ListItem key={id}>\n                <img src={imageSRC} alt={name} width={200} height={300} />\n                <div>\n                  <p>\n                    <span>{name}</span>\n                  </p>\n                  {character ? (\n                    <p>\n                      <b>Character:</b>\n                      <span> {character}</span>\n                    </p>\n                  ) : (\n                    <p>\n                      <b>Character:</b>\n                      <span> Unknown</span>\n                    </p>\n                  )}\n                </div>\n              </ListItem>\n            );\n          })}\n        </List>\n      ) : (\n        <p>There is no information about the cast of this film yet.</p>\n      )}\n    </Section>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCastInfo } from 'components/services/moviesApi';\nimport Cast from 'components/Cast/Cast';\n\nexport default function CastView() {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const cast = await getCastInfo(movieId);\n        setCast(cast);\n      } catch (error) {\n        console.error('Error while fetching cast:', error);\n      }\n    };\n\n    fetchData();\n  }, [movieId]);\n\n  return <Cast cast={cast} />;\n}\n"],"names":["API_KEY","axios","getTrendingMovies","data","results","Error","getMovieById","movieId","then","res","title","poster_path","vote_average","overview","genres","getCastInfo","cast","getReviewsInfo","response","getMoviesByName","query","console","error","ListItem","styled","Section","List","Cast","length","map","id","profile_path","name","character","imageSRC","blankImage","src","alt","width","height","CastView","useParams","useState","setCast","useEffect","fetchData"],"sourceRoot":""}